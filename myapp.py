import yfinance as yf
import streamlit as st
import pandas as pd
from forex_python.converter import CurrencyRates
from datetime import datetime

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="Aplicativo de A√ß√µes",
    page_icon="üíπ",
    layout="wide",
)

# Fun√ß√£o para obter a moeda com base no mercado
def obter_moeda(opcao_mercado):
    return "BRL" if opcao_mercado == "Nacional" else "USD"

# Fun√ß√£o para exibir os gr√°ficos e valores
def exibir_graficos(ticker_df, ticker_symbol, moeda_pais):
    st.subheader(f"Gr√°fico de Fechamento para {ticker_symbol} ({moeda_pais})")
    st.markdown("Este gr√°fico mostra a varia√ß√£o do pre√ßo de fechamento da a√ß√£o ao longo do tempo.")
    
    st.line_chart(round(ticker_df['Close'], 2), use_container_width=True)
    
    # Valores m√°ximos e m√≠nimos como ponto flutuante
    max_value = float(ticker_df['Close'].max())
    min_value = float(ticker_df['Close'].min())
    
    st.text(f"Valor M√°ximo: {max_value:.2f} | Valor M√≠nimo: {min_value:.2f}")

    # Exibindo outros gr√°ficos
    st.subheader(f"Outros Elementos do Gr√°fico para {ticker_symbol} ({moeda_pais})")

    # Fun√ß√£o auxiliar para mostrar gr√°ficos com r√≥tulos e contexto
    def show_chart_with_context(chart_data, label):
        st.subheader(f"{label}")
        st.line_chart(round(chart_data, 2), use_container_width=True)

        max_value = float(chart_data.max())
        min_value = float(chart_data.min())

        st.markdown(f"**Valor M√°ximo:** {max_value:.2f} | **Valor M√≠nimo:** {min_value:.2f}")

    show_chart_with_context(ticker_df['Open'], "Pre√ßo de Abertura")
    show_chart_with_context(ticker_df['Close'].rolling(window=20).mean(), "M√©dia M√≥vel")
    show_chart_with_context(ticker_df['Volume'], "Volume Di√°rio")

# Fun√ß√£o principal para carregar e processar os dados do ticker
def carregar_dados(ticker_symbol, start_date, end_date):
    ticker_data = yf.Ticker(ticker_symbol)
    ticker_df = ticker_data.history(period='1d', start=start_date, end=end_date)

    if ticker_df.empty:
        raise ValueError(f"N√£o foram encontrados dados para o ticker {ticker_symbol} no per√≠odo especificado.")
    
    return ticker_df

# Exibi√ß√£o do t√≠tulo principal e descri√ß√£o
st.title("Gr√°fico de A√ß√µes")
st.write("""
    Insira o Ticker e a data desejada para obter informa√ß√µes detalhadas sobre uma a√ß√£o no per√≠odo selecionado.
""")

# Op√ß√£o para escolher entre a√ß√µes da B3 ou a√ß√µes globais
opcao_mercado = st.sidebar.radio("Escolha o mercado:", ("Nacional", "Global"))

# Campo para inserir o s√≠mbolo da a√ß√£o
exemplo_simbolo = "PETR4.SA" if opcao_mercado == "Nacional" else "AAPL"
ticker_symbol = st.sidebar.text_input(f"Insira o Ticker da a√ß√£o (Utilize .SA ao final caso seja uma a√ß√£o nacional. Ex.: {exemplo_simbolo}):", exemplo_simbolo)

# Obtendo a data atual
data_atual = datetime.today().strftime('%Y-%m-%d')

# Campos para inserir o per√≠odo de tempo
start_date = st.sidebar.text_input("Data de in√≠cio (YYYY-MM-DD):", "2010-05-31")
end_date = st.sidebar.text_input("Data de t√©rmino (YYYY-MM-DD):", data_atual)

# Bot√£o para atualizar os dados e exibir gr√°ficos
if st.sidebar.button("Visualizar Gr√°ficos"):
    try:
        # Adicionando mensagem de carregamento
        with st.spinner('Aguarde... Carregando dados'):
            if not ticker_symbol:
                raise ValueError("Por favor, insira um ticker.")
            
            # Carregar os dados da a√ß√£o
            ticker_df = carregar_dados(ticker_symbol, start_date, end_date)

            # Obter moeda com base no mercado
            moeda_pais = obter_moeda(opcao_mercado)

            # Exibir gr√°ficos e valores
            exibir_graficos(ticker_df, ticker_symbol, moeda_pais)

    except ValueError as e:
        st.error(f"Erro: {e}")
    except Exception as e:
        st.error(f"Ocorreu um erro inesperado: {e}")
