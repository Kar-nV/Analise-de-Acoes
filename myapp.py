import yfinance as yf
import streamlit as st
import pandas as pd
from forex_python.converter import CurrencyRates

# Configurando a p√°gina
st.set_page_config(
    page_title="Aplicativo de A√ß√µes",
    page_icon="üíπ",
    layout="wide",
)

# Fun√ß√£o para obter a moeda com base no mercado
def obter_moeda(opcao_mercado):
    if opcao_mercado == "Nacional":
        return "BRL"
    else:
        return "USD"

# T√≠tulo principal
st.title("Gr√°fico de A√ß√µes")

# Descri√ß√£o do aplicativo
st.write("""
    Insira o Ticker e a data desejada para obter informa√ß√µes detalhadas sobre uma a√ß√£o no per√≠odo selecionado.
""")

# Op√ß√£o para escolher entre a√ß√µes da B3 ou a√ß√µes globais
opcao_mercado = st.sidebar.radio("Escolha o mercado:", ("Nacional", "Global"))

# Campo para inserir o s√≠mbolo da a√ß√£o
exemplo_simbolo = "PETR4.SA" if opcao_mercado == "Nacional" else "AAPL"
ticker_symbol = st.sidebar.text_input(f"Insira o Ticker da a√ß√£o (Utilize .SA ao final caso seja uma a√ß√£o nacional. Ex.: {exemplo_simbolo}):", exemplo_simbolo)

# Campos para inserir o per√≠odo de tempo
start_date = st.sidebar.text_input("Data de in√≠cio (YYYY-MM-DD):", "2010-05-31")
end_date = st.sidebar.text_input("Data de t√©rmino (YYYY-MM-DD):", "2020-05-31")

# Bot√£o para atualizar os dados
if st.sidebar.button("Visualizar Gr√°ficos"):
    try:
        # Adicionando mensagem de aguarde
        with st.spinner('Aguarde... Carregando dados'):
            # Validar entrada
            if not ticker_symbol:
                raise ValueError("Por favor, insira um ticker.")

            # Obtendo os dados da a√ß√£o
            ticker_data = yf.Ticker(ticker_symbol)
            ticker_df = ticker_data.history(period='1d', start=start_date, end=end_date)

            if ticker_df.empty:
                raise ValueError(f"N√£o foram encontrados dados para o ticker {ticker_symbol} no per√≠odo especificado.")

            # Obtendo informa√ß√µes sobre a moeda
            moeda_pais = obter_moeda(opcao_mercado)

            # Exibindo gr√°ficos
            st.subheader(f"Gr√°fico de Fechamento para {ticker_symbol} ({moeda_pais})")
            st.markdown("Este gr√°fico mostra a varia√ß√£o do pre√ßo de fechamento da a√ß√£o ao longo do tempo.")
            st.line_chart(round(ticker_df.Close, 2), use_container_width=True)

            # Cores de valores m√°ximos e m√≠nimos
            max_value = round(ticker_df.Close.max(), 2)
            min_value = round(ticker_df.Close.min(), 2)

            st.text(f"Valor M√°ximo: {max_value} | Valor M√≠nimo: {min_value}")

            st.subheader(f"Outros Elementos do Gr√°fico para {ticker_symbol} ({moeda_pais})")

            # Fun√ß√£o para exibir gr√°fico com r√≥tulo e contexto
            def show_chart_with_context(chart_data, label, max_value_label=None, min_value_label=None):
                st.subheader(f"{label}")
                st.markdown(f"Este gr√°fico mostra a varia√ß√£o do {label.lower()} ao longo do tempo.")

                # Adicionando insights
                insights = {
                    'Cota√ß√£o (Pre√ßo) de Abertura': 'O pre√ßo de abertura representa o valor da a√ß√£o no in√≠cio do per√≠odo de negocia√ß√£o.',
                    'M√©dia M√≥vel': 'A m√©dia m√≥vel suaviza as flutua√ß√µes di√°rias, ajudando a identificar tend√™ncias de longo prazo.',
                    'Faixa de Varia√ß√£o Di√°ria': 'A faixa de varia√ß√£o di√°ria mostra a diferen√ßa entre os pre√ßos mais baixo e mais alto em cada dia.',
                    'Volume Di√°rio': 'O volume di√°rio indica a quantidade total de a√ß√µes negociadas em um dia, podendo sugerir o interesse do mercado.',
                    'Rela√ß√£o entre Pre√ßo de Fechamento e Volume': 'O gr√°fico de dispers√£o revela se h√° correla√ß√£o entre o pre√ßo de fechamento e o volume de negocia√ß√£o.',
                    'Linha de Tend√™ncia': 'A linha de tend√™ncia ajuda a identificar padr√µes e dire√ß√µes poss√≠veis do pre√ßo no futuro.'
                }

                st.line_chart(round(chart_data, 2), use_container_width=True)

                # Indicadores de valor m√°ximo
                max_value = round(chart_data.max(), 2)
                max_value_indicator = f"**Valor M√°ximo:** {max_value}"
                if max_value_label:
                    max_value_indicator += f" | **Total {max_value_label}:** {max_value}"
                st.markdown(max_value_indicator)

                # Indicadores de valor m√≠nimo
                min_value = round(chart_data.min(), 2)
                min_value_indicator = f"**Valor M√≠nimo:** {min_value}"
                if min_value_label:
                    min_value_indicator += f" | **Total {min_value_label}:** {min_value}"
                st.markdown(min_value_indicator)

                # Adicionando insights ao gr√°fico
                if label in insights:
                    st.markdown(f"**O que o gr√°fico representa:** {insights[label]}")

        
            show_chart_with_context(ticker_df.Open, "Pre√ßo de Abertura", max_value_label="Pre√ßo de Abertura M√°ximo", min_value_label="Pre√ßo de Abertura M√≠nimo")
            show_chart_with_context(ticker_df.Close.rolling(window=20).mean(), "M√©dia M√≥vel")
            show_chart_with_context(ticker_df, "Faixa de Varia√ß√£o Di√°ria")
            show_chart_with_context(ticker_df.Volume, "Volume Di√°rio")
            show_chart_with_context(ticker_df.Close[['Close', 'Volume']], "Rela√ß√£o entre Pre√ßo de Fechamento e Volume")
            show_chart_with_context(ticker_df.Close, "Linha de Tend√™ncia")

    except yf.YFinanceError as e:
        st.error(f"Erro ao carregar dados: {e}")
    except pd.errors.EmptyDataError:
        st.error("Os dados para o per√≠odo especificado s√£o vazios. Por favor, escolha um per√≠odo diferente.")
    except ValueError as e:
        st.error(f"Erro: {e}")
    except Exception as e:
        st.error(f"Ocorreu um erro inesperado: {e}")


